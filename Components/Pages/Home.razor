@* @bind tekee kaksisuuntaisen yhteyden HTML-elementin ja C#-muuttujan välille.
   Syötetty arvo = tallessa Blazor-komponentin muistissa. *@

@* @bind on Blazorin kaksisuuntaisen sidonnan (two-way binding) ominaisuus.
   kun käyttäjä muuttaa kentän arvoa, se päivittää automaattisesti taustalla olevaa muuttujaa *@

@* newItem ja amount -muuttujat päivittyvät reaaliaikaisesti käyttäjän syötteen mukaan.

Ei tarvita erillistä napin painalluksen yhteydessä tapahtuvaa arvon lukemista — tiedot ovat jo @code-lohkon muuttujissa. *@


@page "/"
@using ShoplistMauiBlazorHybrid.Models
<div class="form-container">
    <h3>Lisää tuote</h3>

    <input @bind="newItem" placeholder="Syötä tuotteen nimi" />

    <br />
    <input @bind="amount" type="number" placeholder="Syötä määrä" />

    <br />
    <button @onclick="HandleAdd">Lisää tuote</button>

    
</div>
@if (addedItems.Any())
{
    <h4>Lisätyt tuotteet:</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Tuote</th>
                <th>Määrä</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in addedItems)
            {
                <tr>
                    <td>@item.Item</td>
                    <td>@item.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(infoText))
{
    <div class="notification">@infoText</div>
}


@inject HttpClient Http


@code {
    private string newItem = string.Empty;
    private int amount = 1;
    private string infoText = "";
    private List<Shoplist> addedItems = new(); // tallennetaan lisätyt tuotteet tällä istunnolla


    private async Task HandleAdd()
    {
        var newProduct = new Shoplist
            {
                Item = newItem,
                Amount = amount
            };

        var response = await Http.PostAsJsonAsync("https://shoppingbackend-e2ckgsb5gsfjafak.swedencentral-01.azurewebsites.net/api/shoplist/", newProduct);

        if (response.IsSuccessStatusCode)
        {
            infoText = $"Tuote lisätty: {newItem}, {amount} kpl";
            StateHasChanged(); // näkymä päivittyy ennen kuin tyhjennetään
            // Lisää myös näkymän omaan listaan
            addedItems.Add(newProduct);
            await Task.Delay(3000);
            infoText = "";
            StateHasChanged(); // päivitys nollauksen jälkeen

            newItem = string.Empty;
            amount = 1;
        }
        else
        {
            infoText = "Virhe lisättäessä tuotetta!";
        }
    }

}

